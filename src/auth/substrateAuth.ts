/* eslint-disable node/no-extraneous-import */
import {AuthData} from './types';
import {signatureVerify} from '@polkadot/util-crypto';
import {stringToU8a, hexToU8a, u8aConcat, u8aToU8a} from '@polkadot/util';

function auth(data: AuthData): boolean {
  const {address, signature} = data;

  try {
    console.log('Validate as substrate signature.');

    console.log(`address: ${address}`);

    const message = stringToU8a(address);

    // firstly, try to verify as unwrapped bytes
    if (signatureVerify(message, hexToU8a(signature), address).isValid) {
      return true;
    }

    // secondly, try to verify as wrapped bytes. Like signature generated by latest version of polkadot-js extension.
    // ref: https://github.com/polkadot-js/extension/blob/master/packages/extension-dapp/src/wrapBytes.ts
    const wrappedMessage = u8aConcat(
      u8aToU8a('<Bytes>'),
      message,
      u8aToU8a('</Bytes>')
    );
    return signatureVerify(wrappedMessage, hexToU8a(signature), address)
      .isValid;
  } catch (error) {
    console.error(error.message);
  }

  return false;
}

export default {
  auth,
};
